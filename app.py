import streamlit as st
import pandas as pd
import pickle
import matplotlib.pyplot as plt
import plotly.express as px
from streamlit_option_menu import option_menu

# Charger le mod√®le
model = pickle.load(open("diabetes_model3.pkl", "rb"))

# Charger le dataset
df = pd.read_csv("diabetes.csv")
df = df.drop(columns=["Insulin"])  # Supprimer la colonne Insulin

# Configuration de la page
st.set_page_config(page_title="D√©tection de Diab√®te", layout="wide", initial_sidebar_state="expanded")

# Barre de navigation avec style
with st.sidebar:
    selected = option_menu(
        "Menu Principal",
        ["Accueil", "Pr√©diction",],
        icons=["house", "activity",],
        menu_icon="cast",
        default_index=0,
        styles={
            "container": {"background-color": "#f0f2f6"},
            "icon": {"color": "#0000ff", "font-size": "20px"},
            "nav-link": {"font-size": "16px", "text-align": "center", "margin": "10px"},
            "nav-link-selected": {"background-color": "#00bfae", "color": "white"}
        }
    )

# 1. Page d'accueil
# 1. Page d'accueil
if selected == "Accueil":
    st.title("ü©∫ D√©tection de Diab√®te ")
    
    # Afficher l'image avec une taille ajust√©e
    
    # Texte d'accueil avec balises HTML et un style personnalis√©
    st.markdown(
        """
        <div style="font-size: 18px; text-align: center; font-weight: 500; color: #333;">
            Bienvenue sur l'application de D√©tection de Diab√®te. Cette application utilise un mod√®le de machine learning pour pr√©dire 
            la probabilit√© qu'un patient soit diab√©tique en se basant sur des donn√©es m√©dicales telles que l'√¢ge, l'indice de masse corporelle, 
            le taux de glucose, et bien d'autres informations. Suivez les √©tapes ci-dessous pour utiliser l'application efficacement.
        </div>
        """, unsafe_allow_html=True
    )
    
    # Guide √©tape par √©tape
    st.markdown(
        """
        ## üöÄ Comment utiliser l'application :
        
        1. **Page d'accueil** : 
            - Sur cette page, vous √™tes accueillis avec un aper√ßu de l'application.
            - Lisez les instructions et familiarisez-vous avec le fonctionnement de l'application.

        2. **Pr√©diction du Diab√®te** : 
            - Allez dans la section **Pr√©diction** √† partir du menu lat√©ral.
            - Remplissez les informations m√©dicales comme l'√¢ge, le taux de glucose, l'indice de masse corporelle (BMI), etc.
            - Cliquez sur le bouton **Pr√©dire** pour obtenir la pr√©diction de la probabilit√© que vous soyez diab√©tique.

  
        
        ## üìù Astuce :
        - Assurez-vous de remplir tous les champs pour obtenir une pr√©diction plus pr√©cise.
        """, unsafe_allow_html=True
    )
    


# 2. Page de pr√©diction avec formulaire stylis√©
elif selected == "Pr√©diction":
    st.header("Pr√©diction du Diab√®te")
    st.write("Veuillez entrer les informations suivantes pour pr√©dire la probabilit√© de diab√®te.")

    # Fonction pour recueillir les entr√©es utilisateur avec un design am√©lior√©
    def user_input_features():
        # Utilisation de "form" pour organiser les champs de saisie
        with st.form(key='user_input_form'):
            st.subheader("Informations m√©dicales")
            pregnancies = st.number_input("Nombre de grossesses", min_value=0, max_value=20, value=1, step=1)
            glucose = st.number_input("Concentration de glucose (mg/dL)", min_value=0, max_value=200, value=120, step=5)
            blood_pressure = st.number_input("Pression sanguine (mm Hg)", min_value=0, max_value=122, value=70, step=1)
            skin_thickness = st.number_input("√âpaisseur de la peau (mm)", min_value=0, max_value=100, value=20, step=1)
            bmi = st.number_input("Indice de masse corporelle (BMI)", min_value=0.0, max_value=70.0, value=25.0, step=0.1)
            dpf = st.number_input("Fonction d'h√©r√©dit√© du diab√®te (DPF)", min_value=0.0, max_value=3.0, value=0.5, step=0.1)
            age = st.number_input("√Çge", min_value=1, max_value=120, value=25, step=1)

            # Ajouter un bouton de soumission dans le formulaire
            submit_button = st.form_submit_button(label="Pr√©dire")

        # Si le bouton est cliqu√©, renvoyer les donn√©es saisies
        if submit_button:
            data = {
                "Pregnancies": pregnancies,
                "Glucose": glucose,
                "BloodPressure": blood_pressure,
                "SkinThickness": skin_thickness,
                "BMI": bmi,
                "DiabetesPedigreeFunction": dpf,
                "Age": age,
            }
            return pd.DataFrame([data])
        else:
            return None

    user_data = user_input_features()

    # Afficher les donn√©es utilisateur dans un tableau
    if user_data is not None:
        st.subheader("Donn√©es saisies")
        st.write(user_data)  # Affiche les donn√©es sous forme de tableau

        # Pr√©diction avec un style plus dynamique
        prediction = model.predict(user_data)
        result = "Diab√©tique" if prediction[0] == 1 else "Non-Diab√©tique"
        st.subheader("R√©sultat de la Pr√©diction")
        st.success(f"Le patient est : **{result}**")
